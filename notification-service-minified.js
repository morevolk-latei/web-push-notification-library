var PushNotification=null;!function(r){function t(e){var i=console.log;switch(e){case 1:console.info;break;case 2:console.warn;break;case 3:console.error;break;case 4:console.group}var n=Array.prototype.slice.call(arguments,1);i.apply(console,n)}function e(e){if((i=e)&&i.workerFilePath&&i.serverPublicKey){var i;e.messaging&&e.messaging.app&&e.messaging.app.firebase_?this.isFirebaseEnabled=!0:this.isFirebaseEnabled=!1;var n={serverPublicKey:function(e){for(var i=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=r.atob(i),o=new Uint8Array(n.length),t=0;t<n.length;++t)o[t]=n.charCodeAt(t);return o}(e.serverPublicKey)};this.isFirebaseEnabled&&(n={});var o=Object.assign(e,n);this.config=o;this.init()}else t(3,"Invalid config file passed to constructor.",e)}r.onunload=function(e){e.cancelBubble=!0,e.stopPropagation&&(e.stopPropagation(),e.preventDefault()),console.log("Freeing allocated memory"),PushNotification=null},e.prototype.init=function(){t(0,"Push Notification instance created with config ",this.config),this.isServiceWorkerSupported()&&!this.isFirebaseEnabled?function(){this.registerWorker(this.config.workerFilePath).then(function(e){this.registration=e,this.subscribe()}.bind(this)).catch(function(e){})}.call(this):this.isServiceWorkerSupported()&&this.isFirebaseEnabled&&function(){this.requestUserPermission(function(e,i){if(i)return t(2,"Cannot proceed furthor as permission is ",e);this.registerWorker(this.config.workerFilePath).then(function(e){this.registration=e,this.config.messaging.usePublicVapidKey(this.config.serverPublicKey),this.config.messaging.useServiceWorker(e),this.displayForegroundNotification(),this.getFCMTokenFirebase(),this.listenForFCMTokenRefresh()}.bind(this)).catch(function(e){})}.bind(this))}.call(this)},e.prototype.isServiceWorkerSupported=function(){return"serviceWorker"in navigator&&"PushManager"in r},e.prototype.registerWorker=function(e){return new Promise(function(i,n){navigator.serviceWorker.register(e).then(function(e){t(2,"serviceWorker registered."),i(e)}).catch(function(e){t(1,"serviceWorker register failed."),n(e)})})},e.prototype.requestUserPermission=function(i){t(0,"requesting permission..."),Notification.requestPermission().then(function(e){"granted"===e?(t(0,"Notification permission granted."),i(e,!1)):(t(2,"Unable to get permission to notify."),i(e,!0))})},e.prototype.sendFCMTokenToServer=function(e){console.log("Sending FCM token to server ",e)},e.prototype.getFCMTokenFirebase=function(){this.config.messaging.getToken().then(function(e){e?(console.log("FCMToken ",e),this.sendFCMTokenToServer(e)):console.log("No Instance ID token available. Request permission to generate one.")}.bind(this)).catch(function(e){console.log("An error occurred while retrieving token. ",e)})},e.prototype.listenForFCMTokenRefresh=function(){t(1,"Listing for FCM token referesh."),this.config.messaging.onTokenRefresh(function(){this.getFCMTokenFirebase()}.bind(this))},e.prototype.displayForegroundNotification=function(){this.config.messaging.onMessage(function(e){return console.log("Message received foreground. ",e,this),this.registration.showNotification("Foreground Message Title",{body:"Foreground Message body.",icon:"/firebase-logo.png"})}.bind(this))},e.prototype.getExistingSubscriptionOrGenerateNew=function(i){this.registration.pushManager.getSubscription().then(function(e){e?(console.log("Existing subscription"),i.call(this,e,!1)):this.registration.pushManager.subscribe({applicationServerKey:this.config.serverPublicKey,userVisibleOnly:!0}).then(function(e){t("User is subscribed. ",e),i.call(this,e,!1)}).catch(function(e){t("User subscribe failed. ",e),i.call(this,null,!0)})}.bind(this)).catch(function(e){t("An error ocurred during Service Worker registration. ",e),i.call(this,null,!0)}.bind(this))},e.prototype.subscribe=function(){this.getExistingSubscriptionOrGenerateNew(function(e,i){i||console.log("FCM received ",e,this)})},PushNotification=e}(window,document);